<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd"
	default-lazy-init="true">
	
	<!-- 配置缓存管理器 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>              
	</bean>
	
	<!-- 配置 进行授权和认证的Realm -->
   <bean id="sysRealm"  class="cn.com.comit.appointment.modules.sys.security.SystemAuthorizingRealm" ></bean>
    
   <!-- 配置 Shiro 的securityManager Bean -->   
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="realm" ref="sysRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
	</bean>
    
     <!-- 配置Bean后置处理器： 会自动的调用和Spring整合后各个组件的生命周期方法 -->   
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    
<!--  	<bean id="logoutFilter" class="cn.com.comit.RandomInspect.modules.sys.security.SystemLogoutFilter">
        <property name="redirectUrl" value="/doLogout"/>
    </bean> -->
        
    <!-- 配置 shiroFilter bean ：该bean 的 id必须和web.xml 文件中的配置的shiro Filter 的name 一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
<!-- 		<property name="filters">
		    <map>
		        <entry key="logout" value-ref="logoutFilter" /> 
		    </map>
		</property> -->
    	<!-- 装配securityManager -->
    	<property name="securityManager" ref="securityManager"/>
        <!-- 配置登录页面 -->
        <property name="loginUrl" value="/overtime"/>
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <!-- 具体配置需要拦截哪些URL，以及访问对应的URL时使用Shiro的什么Filter进行拦截 -->
        <property name="filterChainDefinitions">
            <value> 
            	/favicon.ico = anon
            	/druid/** = anon
            	/doLogin = anon
            	/static/** = anon
            	/public = anon
            	/sys/logout =  anon
            	/sys/login = anon
            	/access = anon
            	/sys/login.view = anon
            	/wechat/** = anon
                /** = authc
            </value>
        </property>
    </bean>
    
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO"> 
	    <!-- 设置session缓存的名字，这个名字可以任意 --> 
	    <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/> 
	    <!-- 定义该Session DAO操作中所使用的ID生成器 --> 
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/> 
	</bean>
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie"> 
	    <!-- 在Tomcat运行下默认使用的Cookie的名字为JSESSIONID --> 
	    <constructor-arg value="mldn-session-id"/> 
	    <!-- 保证该系统不会受到跨域的脚本操作供给 --> 
	    <property name="httpOnly" value="true"/> 
	    <!-- 定义Cookie的过期时间，单位为秒，如果设置为-1表示浏览器关闭，则Cookie消失 --> 
	    <property name="maxAge" value="-1"/> 
	</bean>
	<bean id="sessionManager"
        class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置 -->
        <property name="globalSessionTimeout" value="1000000"/>
        <!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 定义要使用的无效的Session定时调度器 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- 需要让此session可以使用该定时调度器进行检测 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 定义Session可以进行序列化的工具类 -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!-- 定义sessionIdCookie模版可以进行操作的启用 -->
        <property name="sessionIdCookieEnabled" value="true"/>
    </bean>
    <!-- 配置session的定时验证检测程序类，以让无效的session释放 -->
    <bean id="sessionValidationScheduler"
        class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!-- 设置session的失效扫描间隔，单位为毫秒 -->
        <property name="sessionValidationInterval" value="100000"/>
        <!-- 随后还需要定义有一个会话管理器的程序类的引用 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean> 
	
</beans>